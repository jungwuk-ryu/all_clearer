import 'dart:io';

import 'package:allclearer/app/data/setting_display_value_data.dart';
import 'package:allclearer/app/data/settings/setting_beep.dart';
import 'package:allclearer/app/data/settings/setting_display_value.dart';
import 'package:allclearer/app/data/settings/setting_heatbeat.dart';
import 'package:allclearer/app/data/settings/setting_screen_lighting.dart';
import 'package:allclearer/app/data/settings/setting_vib10.dart';
import 'package:allclearer/app/data/settings/setting_vib3.dart';
import 'package:allclearer/app/modules/allclear/widgets/display_values_container.dart';
import 'package:allclearer/app/modules/allclear/widgets/rxbool_visibility.dart';
import 'package:allclearer/app/ui/widgets/border_container.dart';
import 'package:allclearer/app/ui/widgets/normal_button.dart';
import 'package:allclearer/app/ui/widgets/padding_column.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:shimmer/shimmer.dart';

import '../../../ui/themes/app_colors.dart';
import '../controllers/all_clear_controller.dart';

class AllClearView extends GetView<AllClearController> {
  const AllClearView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Obx(() => Text(controller.getPageTitle())),
        centerTitle: true,
        actions: [
          Obx(() => GestureDetector(
              onTap: () {
                controller.refreshDifference();
              },
              child: controller.isRefreshing()
                  ? const CircularProgressIndicator.adaptive()
                  : const Icon(CupertinoIcons.refresh_thick))),
          const SizedBox(width: 15)
        ],
      ),
      body: SafeArea(
        child: _body(),
      ),
    );
  }

  Widget _body() {
    SettingDisplayValueData dvData =
        controller.getSetting(SettingDisplayValue).getData();

    return Obx(() => Container(
        //duration: const Duration(milliseconds: 0),
        color: controller.getBackgroundColor(),
        padding: EdgeInsets.symmetric(horizontal: 15.w, vertical: 5.h),
        child: Column(
          children: [
            getTimeArea(dvData),
            SizedBox(height: 10.h),
            Expanded(
                child: ListView(
              children: [
                getPreviewButton(),
                const BorderContainer(
                    title: 'üì∫ÌôîÎ©¥',
                    body: 'ÌôîÎ©¥ÏùÑ ÏÇ¨Ïö©Ìïú ÏãúÍ∞ÅÏ†Å Ìö®Í≥º',
                    backgroundColor: AppColors.grey),
                PaddingColumn(children: [
                  DisplayValuesContainer(data: dvData),
                  /*BorderContainer(
                      title: 'Î∞ÄÎ¶¨Ï¥à(ms) ÌëúÏãú',
                      body: 'Î∞ÄÎ¶¨ÏÑ∏Ïª®ÎìúÎ•º ÌëúÏãúÌï¥Ïöî',
                      checkBox:
                          controller.getSetting(SettingMillisecond).getData()),*/
                  BorderContainer(
                      title: 'Î∂âÏùÄ ÏÑ¨Í¥ë',
                      body: '3Ï¥à Ï†ÑÎ∂ÄÌÑ∞ ÌôîÎ©¥Ïù¥ Î∂âÍ≤å ÍπúÎπ°Ïó¨Ïöî.',
                      checkBox: controller
                          .getSetting(SettingScreenLighting)
                          .getData()),
                ]),
                const BorderContainer(
                    title: 'üîäÏÜåÎ¶¨',
                    body: 'ÏßÑÎèôÍ≥º Í¥ÄÎ†®Îêú Ìö®Í≥ºÏùå',
                    backgroundColor: AppColors.grey),
                PaddingColumn(children: [
                  BorderContainer(
                      title: 'ÎπÑÌîÑÏùå',
                      body: '3Ï¥à Ï†ÑÎ∂ÄÌÑ∞ ÎπÑÌîÑÏùåÏùÑ Ïö∏Î†§Ïöî.',
                      checkBox: controller.getSetting(SettingBeep).getData()),
                ]),
                if (Platform.isAndroid || Platform.isIOS)
                  const BorderContainer(
                      title: 'üì≥ÏßÑÎèô',
                      body: 'ÏßÑÎèôÍ≥º Í¥ÄÎ†®Îêú Ìö®Í≥ºÏùå',
                      backgroundColor: AppColors.grey),
                if (Platform.isAndroid || Platform.isIOS)
                  PaddingColumn(
                    children: [
                      BorderContainer(
                          title: 'Ïã¨Ïû•Î∞ïÎèô',
                          body: '60bpmÏùò Ïã¨Ïû•Î∞ïÎèô. 1Ï¥àÎßàÎã§ ÏïΩÌïú ÏßÑÎèôÏùÑ Ïö∏Î†§Ïöî.',
                          checkBox: controller
                              .getSetting(SettingHeartbeat)
                              .getData()),
                      BorderContainer(
                          title: '5Ï¥à Ï†ÑÎ∂ÄÌÑ∞ ÏßÑÎèô',
                          body: '5Ï¥à Ï†ÑÎ∂ÄÌÑ∞ Ï§ëÍ∞Ñ Í∞ïÎèÑÏùò ÏßÑÎèôÏùÑ Ïö∏Î†§Ïöî.',
                          checkBox:
                              controller.getSetting(SettingVib10).getData()),
                      BorderContainer(
                          title: '3Ï¥à Ï†ÑÎ∂ÄÌÑ∞ ÏßÑÎèô',
                          body: '3Ï¥à Ï†ÑÎ∂ÄÌÑ∞ Í∞ïÌïú ÏßÑÎèôÏùÑ Ïö∏Î†§Ïöî.',
                          checkBox:
                              controller.getSetting(SettingVib3).getData()),
                    ],
                  ),
                const BorderContainer(
                    title: 'üõ†Ô∏èÍ∏∞ÌÉÄ',
                    body: '\'ÏßÑÏßú\' Ïò¨ÌÅ¥Îü¨Í∞Ä ÎêòÍ∏∞ ÏúÑÌïú ÏòµÏÖò',
                    backgroundColor: AppColors.grey),
                PaddingColumn(
                  children: [
                    BorderContainer(
                        title: 'ÏãúÍ∞Ñ ÏïûÎãπÍ∏∞Í∏∞',
                        body: 'ÏãúÍ∞ÑÏùÑ nÎ∞ÄÎ¶¨ÏÑ∏Ïª®Îìú Îçî Îπ†Î•¥Í≤å ÎßåÎì§Ïñ¥Ïöî.\nÏù¥Î†áÍ≤å ÌïòÎ©¥ ÏÜêÍ∞ÄÎùΩÏù¥ ÎßàÏö∞Ïä§Î•º ÌÅ¥Î¶≠, ÏöîÏ≤≠Ïù¥ ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ°ÎêòÎ©¥ÏÑú Î∞úÏÉùÌïòÎäî ÏßÄÏó∞ÏãúÍ∞ÑÍπåÏßÄ Í≥†Î†§Ìï† Ïàò ÏûàÏñ¥Ïöî.\n\n5ms = 0.005Ï¥à\n10ms = 0.01Ï¥à\n100ms = 0.1Ï¥à\n1000ms = 1Ï¥à',
                        formatters: [FilteringTextInputFormatter.digitsOnly],
                        textEditingController: controller.fastForwardTEC,
                    textFieldHint: '0 ~ 1000 ÏÇ¨Ïù¥Ïùò Í∞í ÏûÖÎ†•',),
                  ],
                ),
                const Divider(),
                Obx(() {
                  // Íµ¨ÎèÖ
                  controller.isRefreshing();

                  return Visibility(visible: !controller.isPreviewMode(),
                      child: Center(child: Text('Í≥†Î†§Îêú ÏßÄÏó∞ ÏãúÍ∞Ñ : ${controller.getDelay() == null ? 'Î°úÎìú Ï§ë' : (-controller.getDelay()!)}', style: const TextStyle(color: AppColors.textBlueGrey),),));
                }),
              ],
            ))
          ],
        )));
  }

  Widget getPreviewButton() {
    return Obx(() {
      bool isPreview = controller.isPreviewMode();
      Widget child;

      if (!isPreview) {
        child = NormalButton(callback: () {
          controller.setPreviewMode(true);
        }, text: 'Ïó∞Ïäµ Î™®Îìú ÌôúÏÑ±Ìôî ÌïòÍ∏∞');
      } else {
        child = Shimmer.fromColors(
          baseColor: Colors.red,
          highlightColor: Colors.redAccent.shade100.withOpacity(0.5),
          child: GestureDetector(
            onTap: () {
              controller.setPreviewMode(false);
            },
            child: Container(
              height: 30.h,
              width: double.infinity,
              decoration: BoxDecoration(
                  border: Border.all(color: AppColors.textBlueGrey, width: 2),
                  borderRadius: BorderRadius.circular(12.r)),
              child: const Center(
                child: Text('Ïó∞ÏäµÎ™®Îìú ÎÅÑÍ∏∞'),
              ),
            ),
          ),
        );
      }

      return BorderContainer(
        title: 'Ïó∞ÏäµÎ™®Îìú',
        body: 'Í≤∞Ï†ïÏùò ÏàúÍ∞Ñ 1Î∂Ñ 30Ï¥à Ï†ÑÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.',
        backgroundColor: Colors.blueGrey.shade50,
        child: child,
      );
    });
  }

  Widget getTimeArea(SettingDisplayValueData setting) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        RxBoolVisibility(rx: setting.goal, child: getTargetTimeWidget()),
        RxBoolVisibility(
            rx: setting.day,
            child: Obx(() => Text("${controller.day}Ïùº",
                style: TextStyle(
                  fontSize: 15.spMin,
                )))),
        RxBoolVisibility(
            rx: setting.hour,
            child: Obx(() => Text("${controller.hour}Ïãú",
                style: TextStyle(
                  fontSize: 15.spMin,
                )))),
        RxBoolVisibility(
            rx: setting.minute,
            child: Obx(() => Text(
                  "${controller.minute}Î∂Ñ",
                  style: TextStyle(
                      fontSize: 27.spMin, fontWeight: FontWeight.w700),
                ))),
        RxBoolVisibility(
            rx: setting.second,
            child: Obx(() => Text(
                  "${controller.second}Ï¥à",
                  style: TextStyle(
                      fontSize: 30.spMin, fontWeight: FontWeight.w900),
                ))),
        RxBoolVisibility(
            rx: setting.millisecond,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Obx(() => Text("${controller.millisecond}ms")),
              ],
            ))
      ],
    );
  }

  Widget getTargetTimeWidget() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Shimmer.fromColors(
            baseColor: Colors.blueGrey,
            highlightColor: Colors.black12,
            child: RichText(
                text: TextSpan(
                    style: const TextStyle(
                        color: AppColors.grey, fontWeight: FontWeight.bold),
                    children: [
                  const TextSpan(text: 'Í≤∞Ï†ïÏùò ÏàúÍ∞Ñ: '),
                  TextSpan(text: '${controller.goalStr}')
                  /*if (ot.minute != null) TextSpan(text: '${ot.minute}Î∂Ñ '),
                  if (ot.second != null) TextSpan(text: '${ot.second}Ï¥à '),
                  if (ot.minute == null && ot.second == null)
                    const TextSpan(text: 'Ï†ïÍ∞Å')*/
                ])))
      ],
    );
  }
}
